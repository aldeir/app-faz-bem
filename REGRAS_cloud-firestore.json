rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuthenticated() { return request.auth != null; }
    function isOwner(userId) { return isAuthenticated() && request.auth.uid == userId; }
    function isSuperAdmin() { return isAuthenticated() && request.auth.token.email == 'aldeir@gmail.com'; }
    function isVerifiedEntity(userId) {
      let entityPath = /databases/$(database)/documents/artifacts/app-faz-bem-guacui/public/data/entidades/$(userId);
      return isAuthenticated() && exists(entityPath) && get(entityPath).data.status == 'ativo';
    }

    // Regra para a coleção 'users' que está na raiz do banco (SEM ALTERAÇÕES)
    match /users/{userId} {
      allow read: if isOwner(userId) || isSuperAdmin();
      allow create: if isOwner(userId) && request.resource.data.role == 'doador';
      allow update: if isOwner(userId) || isSuperAdmin();
      allow delete: if false;
    }

    // Regra principal para o caminho aninhado
    match /artifacts/{appId}/public/data/{document=**} {
    
      match /notifications/{notificationId} {
        allow create: if isAuthenticated(); 
        allow read, update: if isOwner(resource.data.userId); 
        allow delete: if false;
      }
      
      // --- INÍCIO DA ALTERAÇÃO: Regras atualizadas para a nova estrutura de Entidades ---
      match /entidades/{entityId} {
        allow read: if isAuthenticated();
        
        // Permite a criação se o usuário for o dono do documento e a estrutura de dados estiver correta.
        allow create: if isOwner(entityId) &&
                        request.resource.data.role == 'entidade' &&
                        request.resource.data.status == 'pendente' &&
                        request.resource.data.dadosEntidade.cnpj is string &&
                        request.resource.data.dadosEntidade.nomeFantasia is string;

        // Permite a atualização apenas para o SuperAdmin (para aprovar, por exemplo).
        allow update: if isSuperAdmin() || isOwner(entityId); // Permite que o próprio representante edite
        allow delete: if false;

        // Regra para a subcoleção de representantes
        match /representantes/{representanteId} {
          allow read: if isOwner(representanteId) || isSuperAdmin();
          
          // Permite a criação do representante apenas se o usuário for o mesmo que está a criar a entidade principal.
          allow create: if isOwner(representanteId) && representanteId == entityId;
          
          allow update: if isOwner(representanteId) || isSuperAdmin();
          allow delete: if false;
        }
      }
      // --- FIM DA ALTERAÇÃO ---
      
      match /campaigns/{campaignId} {
        allow read: if true;
        allow create: if (isVerifiedEntity(request.auth.uid) || isSuperAdmin()) && request.resource.data.creatorId == request.auth.uid;
        allow update: if isOwner(resource.data.creatorId) || isSuperAdmin();
        allow delete: if false;
      }

      match /configs/{configId} {
        allow read: if true;
        allow write: if isSuperAdmin();
      }

      match /donations/{donationId} {
        allow read: if true;
        allow create: if isOwner(request.resource.data.donorId);
        allow update: if isOwner(resource.data.donorId) || isVerifiedEntity(resource.data.entityId);
        allow delete: if isOwner(resource.data.donorId);
      }
      
      match /likes/{likeId} {
        allow read: if true;
        allow create, delete: if isOwner(request.resource.data.likerId);
        allow update: if false;
      }
    }
  }
}
